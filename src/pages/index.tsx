import { type NextPage } from "next";
import Head from "next/head";

import { api } from "~/utils/api";
import InputField from "./components/InputField";
import { useState } from "react";
import { Tweet } from "@prisma/client";

const Home: NextPage = () => {
  const { data: tweets, isLoading, refetch } = api.tweet.getTweets.useQuery();
  const { mutateAsync } = api.tweet.createTweet.useMutation({
    onSuccess() {
      refetch();
    },
  });
  const [text, setText] = useState("");
  const [author, setAuthor] = useState("");

  const onSubmit = async (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    try {
      await mutateAsync({
        text,
        author,
      });
      setText("");
      setAuthor("");
    } catch (err) {
      console.log(err);
    }
  };

  return (
    <>
      <Head>
        <title>Tweet App</title>
        <meta name="description" content="Generated by create-t3-app" />
      </Head>
      <main className="flex h-screen flex-col items-center justify-center gap-5 bg-gradient-to-t from-blue-400 to-indigo-400 px-5 py-10 md:flex-row">
        <div className="w-full max-w-[400px]">
          <h1 className="mb-10 flex border-b-2 pb-5 text-4xl font-semibold text-white">
            Write <span className="ml-5 rotate-12 border-b-2">your tweet</span>
          </h1>
          <form onSubmit={onSubmit} className="w-full max-w-[500px] ">
            <div className="flex flex-col gap-4">
              <InputField
                label="Write your tweet!"
                placeholder="I'm..."
                onChange={(e) => {
                  setText(e.target.value);
                }}
                value={text}
              />
              <InputField
                label="Author name"
                placeholder="e.g Unknown"
                onChange={(e) => {
                  setAuthor(e.target.value);
                }}
                value={author}
              />
            </div>
            <button className="mt-4 w-full cursor-pointer rounded-[15px]  bg-blue-500 px-5 py-2 text-white transition hover:bg-blue-400">
              Tweet
            </button>
          </form>
        </div>
        <div className="mt-4"></div>
        <div className="no-scroll flex h-full w-full max-w-[500px] flex-col gap-4 overflow-y-scroll">
          {isLoading ? (
            <p>Loading...</p>
          ) : (tweets ?? []).length > 0 ? (
            tweets?.reverse().map((tweet: Tweet) => <TweetCard tweet={tweet} />)
          ) : (
            <p>0 tweets</p>
          )}
        </div>
      </main>
    </>
  );
};

export default Home;

const TweetCard = ({ tweet }: { tweet: Tweet }) => {
  return (
    <div className="flex w-full flex-col rounded-lg border bg-white/50 p-4 backdrop-blur-lg backdrop-filter">
      <div className="flex items-center justify-between">
        <div className="flex items-center gap-2">
          <img
            src={`https://api.dicebear.com/6.x/big-ears-neutral/svg?seed=${tweet.author}`}
            alt={tweet.author}
            className="w-[30px] rounded-full"
          />
          <h2 className="font-bold">{tweet.author}</h2>
        </div>
        <span>{new Date(tweet.createdAt).toLocaleString()}</span>
      </div>
      {tweet.html ? (
        <div
          dangerouslySetInnerHTML={{
            __html: tweet.html,
          }}
        ></div>
      ) : (
        <p className="mt-2">{tweet.text}</p>
      )}
    </div>
  );
};
